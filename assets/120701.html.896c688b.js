import{_ as n,o as s,c as a,a as p}from"./app.9376a9a7.js";const t={},e=p(`<h2 id="\u641C\u7D22\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u641C\u7D22\u7B97\u6CD5" aria-hidden="true">#</a> \u641C\u7D22\u7B97\u6CD5</h2><h3 id="\u987A\u5E8F\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#\u987A\u5E8F\u641C\u7D22" aria-hidden="true">#</a> \u987A\u5E8F\u641C\u7D22</h3><p><code>It&#39;s so bad!!</code></p><p>\u4EE3\u7801\u5B9E\u73B0\u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> IEqualsFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./linkedList&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defaultEquals <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./linkedList&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">DOES_NOT_EXIST</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">sequentialSearch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> equalsFn<span class="token operator">:</span> IEqualsFunction<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> defaultEquals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">equalsFn</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> i
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token constant">DOES_NOT_EXIST</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u5206\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u5206\u641C\u7D22" aria-hidden="true">#</a> \u4E8C\u5206\u641C\u7D22</h3><ul><li>\u9009\u62E9\u6570\u7EC4\u7684\u4E2D\u95F4\u503C</li><li>\u5982\u679C\u9009\u4E2D\u503C\u662F\u5F85\u641C\u7D22\u503C\uFF0C\u90A3\u4E48\u7B97\u6CD5\u6267\u884C\u5B8C\u6BD5\uFF08\u503C\u627E\u5230\u4E86\uFF09</li><li>\u5982\u679C\u5F85\u641C\u7D22\u503C\u6BD4\u9009\u4E2D\u503C\u8981\u5C0F\uFF0C\u5219\u8FD4\u56DE\u6B65\u9AA41\u5E76\u5728\u9009\u4E2D\u503C\u5DE6\u8FB9\u7684\u5B50\u6570\u7EC4\u4E2D\u5BFB\u627E\uFF08\u8F83\u5C0F\uFF09</li><li>\u5982\u679C\u5F85\u641C\u7D22\u503C\u6BD4\u9009\u4E2D\u503C\u8981\u5927\uFF0C\u5219\u8FD4\u56DE\u6B65\u9AA41\u5E76\u5728\u9009\u79CD\u503C\u53F3\u8FB9\u7684\u5B50\u6570\u7EC4\u4E2D\u5BFB\u627E\uFF08\u8F83\u5927\uFF09</li></ul><p>\u4E8C\u5206\u641C\u7D22\u4E4B\u524D\u9700\u8981\u5148\u5C06\u6570\u7EC4\u6392\u5E8F\u5B8C\u6BD5\uFF0C\u54B1\u4EEC\u53EF\u4EE5\u9009\u62E9 <code>\u5FEB\u901F\u6392\u5E8F\u7B97\u6CD5</code> \u8FDB\u884C\u5C0F\u5230\u5927\u7684\u6392\u5E8F</p><p>\u5FAA\u73AF\u7248\u672C\u4EE3\u7801\u5B9E\u73B0\u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">binarySearch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> compareFn<span class="token operator">:</span> ICompareFunction<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> defaultCompare<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> sortedArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>

  <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> high <span class="token operator">=</span> sortedArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> element <span class="token operator">=</span> sortedArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span>
      low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span>
      high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">else</span>
      <span class="token keyword">return</span> mid
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token constant">DOES_NOT_EXIST</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9012\u5F52\u7248\u672C\u5B9E\u73B0\u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">binarySearchRecursiveHelp</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> low<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> high<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> compareFn<span class="token operator">:</span> ICompareFunction<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> defaultCompare<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> element <span class="token operator">=</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">binarySearchRecursiveHelp</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> value<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>

    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">binarySearchRecursiveHelp</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> value<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>

    <span class="token keyword">else</span>
      <span class="token keyword">return</span> mid
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token constant">DOES_NOT_EXIST</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">binarySearchRecursive</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> compareFn<span class="token operator">:</span> ICompareFunction<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> defaultCompare<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> sortedArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
  <span class="token keyword">const</span> low <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">const</span> high <span class="token operator">=</span> sortedArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>

  <span class="token keyword">return</span> <span class="token function">binarySearchRecursiveHelp</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> value<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vitest\u6D4B\u8BD5\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;binarySearch&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">322</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">13423</span><span class="token punctuation">,</span> <span class="token number">6123</span><span class="token punctuation">,</span> <span class="token number">421</span><span class="token punctuation">,</span> <span class="token number">223</span><span class="token punctuation">,</span> <span class="token number">734</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">567</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">567</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">,</span> <span class="token number">123123</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">,</span> <span class="token number">556456</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> findValue <span class="token operator">=</span> <span class="token number">421</span>

  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> findValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;binarySearchRecursive&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">322</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">13423</span><span class="token punctuation">,</span> <span class="token number">6123</span><span class="token punctuation">,</span> <span class="token number">421</span><span class="token punctuation">,</span> <span class="token number">223</span><span class="token punctuation">,</span> <span class="token number">734</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">567</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">567</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">,</span> <span class="token number">123123</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">,</span> <span class="token number">556456</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> findValue <span class="token operator">=</span> <span class="token number">421</span>

  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">binarySearchRecursive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> findValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u4E2A\u4EE3\u7801\u5B9E\u73B0\u76F8\u5BF9\u8F83\u5BB9\u6613\u770B\u660E\u767D\uFF0C\u6240\u4EE5\u65E0\u56FE\u793A\u5206\u6790\u{1F602}</p><h3 id="\u5185\u63D2\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#\u5185\u63D2\u641C\u7D22" aria-hidden="true">#</a> \u5185\u63D2\u641C\u7D22</h3>`,16),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","120701.html.vue"]]);export{r as default};
