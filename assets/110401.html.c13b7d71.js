import{_ as n,o as s,c as a,a as t}from"./app.9376a9a7.js";const p="/assets/2022-11-04-12-53-06.06307cbf.png",o="/assets/2022-11-04-12-55-10.99a2f226.png",e="/assets/2022-11-04-11-08-23.0206bb2a.png",c="/assets/2022-11-04-11-08-52.70022cee.png",i="/assets/2022-11-04-13-04-01.65f67005.png",l="/assets/2022-11-04-14-15-47.a19e4da4.png",u="/assets/2022-11-04-14-11-58.50a8c567.png",r="/assets/2022-11-04-14-29-00.a6b30241.png",k="/assets/2022-11-04-14-26-47.cf7455e2.png",d="/assets/2022-11-04-15-24-16.8b4ba6ab.png",v="/assets/2022-11-04-15-18-04.286e3f4f.png",m="/assets/2022-11-04-15-28-09.58dfbc29.png",b="/assets/2022-11-04-15-30-42.58304bb6.png",g="/assets/2022-11-04-15-42-09.c2947155.png",h="/assets/2022-11-05-14-33-28.4ac01893.png",y="/assets/2022-11-06-15-59-46.019a8d6e.png",f="/assets/2022-11-06-16-43-05.e02810fc.png",w="/assets/2022-11-06-17-57-37.267396b5.png",x="/assets/2022-11-06-18-33-57.10371135.png",E={},B=t('<h2 id="\u56FE" tabindex="-1"><a class="header-anchor" href="#\u56FE" aria-hidden="true">#</a> \u56FE</h2><ul><li>\u76F8\u90BB\u9876\u70B9\uFF1A\u7531 <span style="color:pink;">\u4E00\u6761\u8FB9</span> \u8FDE\u63A5\u5728\u4E00\u8D77\u7684\u9876\u70B9</li><li>\u9876\u70B9\u7684\u5EA6\uFF1A <ul><li>\u65E0\u5411\u56FE\uFF1A\u4E00\u4E2A\u9876\u70B9\u7684\u5EA6\u662F\u5176\u76F8\u90BB\u9876\u70B9\u7684\u6570\u91CF</li><li>\u6709\u5411\u56FE\uFF1A\u5206\u4E3A\u5165\u5EA6\uFF08\u5176\u4ED6\u76F8\u90BB\u9876\u70B9\u6307\u5411\u5F53\u524D\u9876\u70B9\uFF09\u8DDF\u51FA\u5EA6\uFF08\u5F53\u524D\u9876\u70B9\u6307\u51FA\u53BB\u5230\u5176\u4ED6\u76F8\u90BB\u9876\u70B9\uFF09</li></ul></li><li>\u8DEF\u5F84\uFF1A\u8DEF\u5F84\u662F\u9876\u70B9v1, v2,\u2026, vk\u7684\u4E00\u4E2A\u8FDE\u7EED\u5E8F\u5217\uFF0C\u5176\u4E2Dvi\u548Cvi+1\u662F\u76F8\u90BB\u7684</li><li>\u7B80\u5355\u8DEF\u5F84\uFF1A\u7B80\u5355\u8DEF\u5F84\u8981\u6C42 <span style="color:pink;">\u4E0D\u5305\u542B\u91CD\u590D</span> \u7684\u9876\u70B9\uFF0C</li><li>\u73AF\uFF1A\u9664\u53BB\u6700\u540E\u4E00\u4E2A\u9876\u70B9\uFF08\u56E0\u4E3A\u5B83\u548C\u7B2C\u4E00\u4E2A\u9876\u70B9\u662F\u540C\u4E00\u4E2A\u9876\u70B9\uFF09\uFF0C\u73AF\u4E5F\u662F\u4E00\u4E2A\u7B80\u5355\u8DEF\u5F84</li><li>\u65E0\u73AF\uFF1A\u5982\u679C\u56FE\u4E2D\u4E0D\u5B58\u5728\u73AF\uFF0C\u5219\u79F0\u8BE5\u56FE\u662F\u65E0\u73AF\u7684</li><li>\u8FDE\u901A\uFF1A\u5982\u679C\u56FE\u4E2D <span style="color:pink;">\u6BCF\u4E24\u4E2A\u9876\u70B9\u95F4\u90FD\u5B58\u5728\u8DEF\u5F84</span> \uFF0C\u5219\u8BE5\u56FE\u662F\u8FDE\u901A\u7684\uFF0C\u5982\u4E0B\u56FE <img src="'+p+'" alt="\u8FDE\u901A\u65E0\u5411\u56FE"></li><li>\u5F3A\u8FDE\u901A\uFF1A\u6BCF\u4E24\u4E2A\u9876\u70B9\u95F4 <span style="color:pink;">\u5728\u53CC\u5411\u4E0A\u90FD\u5B58\u5728\u8DEF\u5F84</span> \uFF0C\u5982\u4E0B\u56FE <img src="'+o+'" alt="\u5F3A\u8FDE\u901A\u65E0\u5411\u56FE"></li></ul><h3 id="\u6709\u5411\u56FE\u3001\u65E0\u5411\u56FE\u548C\u52A0\u6743\u56FE" tabindex="-1"><a class="header-anchor" href="#\u6709\u5411\u56FE\u3001\u65E0\u5411\u56FE\u548C\u52A0\u6743\u56FE" aria-hidden="true">#</a> \u6709\u5411\u56FE\u3001\u65E0\u5411\u56FE\u548C\u52A0\u6743\u56FE</h3><ul><li>\u6709\u5411\u56FE\uFF1A\u8FB9\u6709\u4E00\u4E2A\u65B9\u5411\uFF0CA\u53EF\u5230B\uFF0CB\u4E0D\u4E00\u5B9A\u53EF\u5230A</li><li>\u52A0\u6743\u56FE\uFF1A\u8FB9\u5B58\u5728\u6743\u91CD</li><li>\u65E0\u5411\u56FE\uFF1A\u8FDE\u63A5\u800C\u65E0\u65B9\u5411\uFF0CA\u53EF\u5230B\uFF0CB\u53EF\u5230A</li></ul><p><img src="'+e+'" alt="\u6709\u5411\u56FE"></p><p>\u5982\u679C\u56FE\u4E2D\u6BCF\u4E24\u4E2A\u9876\u70B9\u95F4\u5728\u53CC\u5411\u4E0A\u90FD\u5B58\u5728\u8DEF\u5F84\uFF0C\u5219\u8BE5\u56FE\u662F\u5F3A\u8FDE\u901A\u7684\u3002CD\u53CC\u5411\u90FD\u5B58\u5728\u8DEF\u5F84\u662F\u5F3A\u8FDE\u901A\u7684\uFF0CAB\u4E0D\u662F\u5F3A\u8FDE\u901A\u7684\u6240\u4EE5\u56FE\u793A\u7684\u56FE\u4E0D\u662F <span style="color:pink;">\u5F3A\u8FDE\u901A\u7684</span></p><p>\u56FE\u8FD8\u53EF\u4EE5\u662F <span style="color:pink;">\u672A\u52A0\u6743\u7684\u6216\u662F\u52A0\u6743\u7684</span> \u3002\u52A0\u6743\u7684\u610F\u601D\u5C31\u662F\u8FB9\u5177\u6709\u6743\u503C\uFF0C\u5982\u4E0B\u56FE\u6240\u793A</p><p><img src="'+c+'" alt="\u52A0\u6743\u56FE"></p><h3 id="\u56FE\u7684\u90BB\u63A5\u77E9\u9635\u8868\u793A\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u56FE\u7684\u90BB\u63A5\u77E9\u9635\u8868\u793A\u6CD5" aria-hidden="true">#</a> \u56FE\u7684\u90BB\u63A5\u77E9\u9635\u8868\u793A\u6CD5</h3><p>\u6211\u4EEC\u7528\u4E00\u4E2A\u4E8C\u7EF4\u6570\u7EC4\u6765\u8868\u793A\u9876\u70B9\u4E4B\u95F4\u7684\u8FDE\u63A5\u3002\u5982\u679C\u7D22\u5F15\u4E3Ai\u7684\u8282\u70B9\u548C\u7D22\u5F15\u4E3Aj\u7684\u8282\u70B9\u76F8\u90BB\uFF0C\u5219array[i][j] === 1\uFF0C\u5426\u5219array[i][j] === 0</p><p>\u4F7F\u7528\u4E8C\u7EF4\u6570\u7EC4\u8FDB\u884C\u8868\u793A\uFF0C\u4F1A\u6D6A\u8D39\u5F88\u591A\u7A7A\u95F4\uFF0C\u56E0\u4E3A\u6211\u4EEC\u5BF9\u4E8E\u56FE\u7684\u4E00\u7CFB\u5217\u64CD\u4F5C\uFF08\u67E5\u627E\uFF0C\u904D\u5386\u7B49\uFF09\u65E0\u975E\u662F\u57FA\u4E8E\u8FB9\u7684\u5173\u7CFB\u8FDB\u884C\u7684\uFF08\u5B58\u50A81\uFF09\uFF0C\u9876\u70B9\u4E0E\u9876\u70B9\u4E4B\u95F4\u82E5\u65E0\u8FB9\u6B64\u65F6\u5B58\u50A80\uFF0C\u8FD9\u5176\u5B9E\u662F\u6D6A\u8D39\u4E86\u7A7A\u95F4\u7684\uFF0C\u56E0\u4E3A\u6211\u4EEC\u672C\u4E0D\u9700\u89810\u8FD9\u4E2A\u5173\u7CFB\uFF01\uFF01\u5C24\u5176\u662F\u51FA\u73B0\u7A00\u758F\u56FE\uFF08\u4E0D\u662F\u5F3A\u8FDE\u901A\u7684\u56FE\uFF0C\u5982\u4E0B\u56FE\uFF09\uFF0C\u6B64\u65F6\u4F1A\u51FA\u73B0\u5F88\u591A0\uFF01\uFF01\uFF01\u5F3A\u8FDE\u901A\u56FE\u53EA\u4F1A\u662F\u5DE6\u4E0A\u5230\u53F3\u4E0B\u659C\u7EBF\u5168\u4E3A0\uFF0C\u5176\u4F59\u5168\u4E3A1</p><p><img src="'+i+'" alt="\u7A00\u758F\u56FE\u4E0E\u5F3A\u8FDE\u901A\u56FE"></p><h4 id="\u672A\u52A0\u6743\u90BB\u63A5\u77E9\u9635" tabindex="-1"><a class="header-anchor" href="#\u672A\u52A0\u6743\u90BB\u63A5\u77E9\u9635" aria-hidden="true">#</a> \u672A\u52A0\u6743\u90BB\u63A5\u77E9\u9635</h4><p>\u5BF9\u4E8E\u672A\u52A0\u6743\u56FE\u800C\u8A00\uFF0C\u82E5\u9876\u70B9Vi \u548C Vj \u4E4B\u95F4\u6709\u8FB9\u76F8\u8FDE\uFF0C\u5219\u90BB\u63A5\u77E9\u9635\u4E2D\u5BF9\u5E94\u9879\u5B58\u653E\u77401\uFF0C\u82E5\u9876\u70B9Vi \u548C Vj \u4E0D\u76F8\u8FDE\uFF0C\u5219\u75280\u4EE3\u8868\u8FD9\u4E24\u4E2A\u9876\u70B9\u4E4B\u95F4\u4E0D\u5B58\u5728\u8FB9\u3002</p><p><strong>\u672A\u52A0\u6743\u6709\u5411\u56FE</strong><img src="'+l+'" alt="\u672A\u52A0\u6743\u6709\u5411\u56FE"></p><p><strong>\u672A\u52A0\u6743\u65E0\u5411\u56FE</strong><img src="'+u+'" alt="\u672A\u52A0\u6743\u65E0\u5411\u56FE"></p><ul><li>\u53EF\u4EE5\u770B\u5230\u5BF9\u4E8E\u65E0\u5411\u56FE\u57FA\u4E8E\u5BF9\u89D2\u7EBF\u5212\u5206\u4E3A\u4E0A\u4E0B\u4E24\u534A\uFF0C\u4ED6\u4EEC\u662F\u5BF9\u79F0\u7684\uFF0C\u6240\u4EE5\u5B58\u50A8\u4E00\u534A\u5C31\u597D\u4E86\uFF01\uFF01</li></ul><h4 id="\u52A0\u6743\u90BB\u63A5\u77E9\u9635" tabindex="-1"><a class="header-anchor" href="#\u52A0\u6743\u90BB\u63A5\u77E9\u9635" aria-hidden="true">#</a> \u52A0\u6743\u90BB\u63A5\u77E9\u9635</h4><p>\u5BF9\u4E8E\u5E26\u6743\u56FE\u800C\u8A00\uFF0C\u82E5\u9876\u70B9Vi \u548C Vj \u4E4B\u95F4\u6709\u8FB9\u76F8\u8FDE\uFF0C\u5219\u90BB\u63A5\u77E9\u9635\u4E2D\u5BF9\u5E94\u9879\u5B58\u653E\u7740\u8BE5\u8FB9\u5BF9\u5E94\u7684\u6743\u503C\uFF0C\u82E5\u9876\u70B9Vi \u548C Vj \u4E0D\u76F8\u8FDE\uFF0C\u5219\u75280\u6216\u221E\u6765\u4EE3\u8868\u8FD9\u4E24\u4E2A\u9876\u70B9\u4E4B\u95F4\u4E0D\u5B58\u5728\u8FB9\u3002</p><p><strong>\u52A0\u6743\u6709\u5411\u56FE</strong><img src="'+r+'" alt="\u52A0\u6743\u6709\u5411\u56FE"></p><p><strong>\u52A0\u6743\u65E0\u5411\u56FE</strong><img src="'+k+'" alt="\u52A0\u6743\u65E0\u5411\u56FE"></p><h3 id="\u56FE\u7684\u90BB\u63A5\u8868\u8868\u793A\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u56FE\u7684\u90BB\u63A5\u8868\u8868\u793A\u6CD5" aria-hidden="true">#</a> \u56FE\u7684\u90BB\u63A5\u8868\u8868\u793A\u6CD5</h3><p>\u6BCF\u4E00\u4E2A\u9876\u70B9\u90FD\u662F\u4E00\u4E2A\u94FE\u8868\u6570\u636E\u7ED3\u6784\uFF0C\u6570\u7EC4\u5B58\u653E\u6BCF\u4E00\u4E2A\u9876\u70B9</p><h4 id="\u672A\u52A0\u6743\u90BB\u63A5\u8868" tabindex="-1"><a class="header-anchor" href="#\u672A\u52A0\u6743\u90BB\u63A5\u8868" aria-hidden="true">#</a> \u672A\u52A0\u6743\u90BB\u63A5\u8868</h4><p><strong>\u672A\u52A0\u6743\u6709\u5411\u56FE</strong><img src="'+d+'" alt="\u672A\u52A0\u6743\u6709\u5411\u56FE"></p><p><strong>\u672A\u52A0\u6743\u65E0\u5411\u56FE</strong><img src="'+v+'" alt="\u672A\u52A0\u6743\u65E0\u5411\u56FE"></p><h4 id="\u52A0\u6743\u90BB\u63A5\u8868" tabindex="-1"><a class="header-anchor" href="#\u52A0\u6743\u90BB\u63A5\u8868" aria-hidden="true">#</a> \u52A0\u6743\u90BB\u63A5\u8868</h4><p><strong>\u52A0\u6743\u6709\u5411\u56FE</strong><img src="'+m+'" alt="\u52A0\u6743\u6709\u5411\u56FE"></p><p><strong>\u52A0\u6743\u65E0\u5411\u56FE</strong><img src="'+b+'" alt="\u52A0\u6743\u65E0\u5411\u56FE"></p><h3 id="\u56FE\u7684\u5173\u8054\u77E9\u9635\u8868\u793A\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u56FE\u7684\u5173\u8054\u77E9\u9635\u8868\u793A\u6CD5" aria-hidden="true">#</a> \u56FE\u7684\u5173\u8054\u77E9\u9635\u8868\u793A\u6CD5</h3><p>\u5728\u5173\u8054\u77E9\u9635\u4E2D\uFF0C\u77E9\u9635\u7684\u884C\u8868\u793A\u9876\u70B9\uFF0C\u5217\u8868\u793A\u8FB9\u3002\u5982\u4E0B\u56FE\u6240\u793A\uFF0C\u4F7F\u7528\u4E8C\u7EF4\u6570\u7EC4\u6765\u8868\u793A\u4E24\u8005\u4E4B\u95F4\u7684\u8FDE\u901A\u6027\uFF0C\u5982\u679C\u9876\u70B9v\u662F\u8FB9e\u7684\u5165\u5C04\u70B9\uFF0C\u5219array[v][e] === 1\uFF1B\u5426\u5219\uFF0Carray[v][e] === 0\u3002</p><p><img src="'+g+`" alt="\u5173\u8054\u77E9\u9635"></p><h2 id="\u4EE3\u7801\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u5B9E\u73B0" aria-hidden="true">#</a> \u4EE3\u7801\u5B9E\u73B0</h2><h3 id="\u521B\u5EFAgraph\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u521B\u5EFAgraph\u7C7B" aria-hidden="true">#</a> \u521B\u5EFAGraph\u7C7B</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Dictionary <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dictionary&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> vertices<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">private</span> adjList<span class="token operator">:</span> Dictionary<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> isDirected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">addVertex</span><span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertices<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>vertices<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>adjList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">addEdge</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u9A8C\u8BC1\u6DFB\u52A0\u7684\u4E24\u4E2A\u9876\u70B9\u662F\u5426\u5728 adjList \u5217\u8868\u4E2D\uFF0C\u4E0D\u5B58\u5728\u5219\u90FD\u6DFB\u52A0\u8FDB\u53BB\uFF01\uFF01</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

    <span class="token comment">// a -&gt; b</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

    <span class="token comment">// \u82E5\u4E3A\u65E0\u5411\u56FE b -&gt; a\uFF0C\u5426\u5219\u53EA\u662F\u5355\u5411 a -&gt; b</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isDirected<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">getVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vertices
  <span class="token punctuation">}</span>

  <span class="token function">getAdjList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adjList
  <span class="token punctuation">}</span>

  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      s <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -&gt; </span><span class="token template-punctuation string">\`</span></span>
      <span class="token keyword">const</span> neighbors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> neighbors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        s <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>neighbors<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span>

      s <span class="token operator">+=</span> <span class="token string">&#39;\\n&#39;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> s
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vitest\u6D4B\u8BD5\u5982\u4E0B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> describe<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Graph <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../examples/graph&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;graph.ts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;Graph&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> vertices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> vertices<span class="token punctuation">)</span>
      graph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &quot;A -&gt; B C D 
      B -&gt; A E F 
      C -&gt; A D 
      D -&gt; A C 
      E -&gt; B 
      F -&gt; B 
      &quot;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u56FE\u7684\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u56FE\u7684\u904D\u5386" aria-hidden="true">#</a> \u56FE\u7684\u904D\u5386</h3><ul><li>\u5FC5\u987B\u8FFD\u8E2A\u6BCF\u4E2A\u7B2C\u4E00\u6B21\u8BBF\u95EE\u7684\u8282\u70B9\uFF0C\u5E76\u4E14\u8FFD\u8E2A\u6709\u54EA\u4E9B\u8282\u70B9\u8FD8\u6CA1\u6709\u88AB\u5B8C\u5168\u63A2\u7D22</li><li>\u5B8C\u5168\u63A2\u7D22\u4E00\u4E2A\u9876\u70B9\u8981\u6C42\u6211\u4EEC\u67E5\u770B\u8BE5\u9876\u70B9\u7684\u6BCF\u4E00\u6761\u8FB9\u3002\u5BF9\u4E8E\u6BCF\u4E00\u6761\u8FB9\u6240\u8FDE\u63A5\u7684\u6CA1\u6709\u88AB\u8BBF\u95EE\u8FC7\u7684\u9876\u70B9\uFF0C\u5C06\u5176\u6807\u6CE8\u4E3A\u88AB\u53D1\u73B0\u7684\uFF0C\u5E76\u5C06\u5176\u52A0\u8FDB\u5F85\u8BBF\u95EE\u9876\u70B9\u5217\u8868\u4E2D</li><li>\u4E3A\u4E86\u4FDD\u8BC1\u7B97\u6CD5\u7684\u6548\u7387\uFF0C\u52A1\u5FC5\u8BBF\u95EE\u6BCF\u4E2A\u9876\u70B9\u81F3\u591A\u4E24\u6B21</li></ul><p>\u4E09\u79CD\u989C\u8272\u8868\u793A\u9876\u70B9\u7684\u72B6\u6001</p><ul><li>\u767D\u8272\uFF1A\u672A\u88AB\u8BBF\u95EE\u8FC7\u7684\u9876\u70B9</li><li>\u7070\u8272\uFF1A\u53D1\u73B0\u9876\u70B9\uFF0C\u88AB\u8BBF\u95EE\u8FC7</li><li>\u9ED1\u8272\uFF1A\u88AB\u8BBF\u95EE\u8FC7\u4E14\u88AB\u5B8C\u5168\u63A2\u7D22\u8FC7</li></ul><p>\u989C\u8272\u679A\u4E3E\u4EE3\u7801\u5982\u4E0B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Colors <span class="token punctuation">{</span>
  <span class="token constant">WHITE</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token constant">GREY</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BLACK</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u521D\u59CB\u60C5\u51B5\u6240\u6709\u9876\u70B9\u90FD\u662F\u767D\u8272\uFF0C\u521D\u59CB\u5316\u989C\u8272\u4EE3\u7801\u5982\u4E0B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initializeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vertices<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> color<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    color<span class="token punctuation">[</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">WHITE</span>

  <span class="token keyword">return</span> color
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22-bfs" tabindex="-1"><a class="header-anchor" href="#\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22-bfs" aria-hidden="true">#</a> \u5E7F\u5EA6\u4F18\u5148\u641C\u7D22\uFF08BFS\uFF09</h4><p><span style="color:pink;">\u9700\u8981\u4E00\u4E2A\u6E90\u9876\u70B9startVertex</span></p><ul><li>\u521B\u5EFA\u4E00\u4E2A\u961F\u5217Q\u3002</li><li>\u6807\u6CE8v\u4E3A\u88AB\u53D1\u73B0\u7684\uFF08\u7070\u8272\uFF09\uFF0C\u5E76\u5C06v\u5165\u961F\u5217Q\u3002</li><li>\u5982\u679CQ\u975E\u7A7A\uFF0C\u5219\u8FD0\u884C\u4EE5\u4E0B\u6B65\u9AA4\uFF1A <ul><li>\u5C06u\u4ECEQ\u4E2D\u51FA\u961F\u5217\uFF1B</li><li>\u6807\u6CE8u\u4E3A\u88AB\u53D1\u73B0\u7684\uFF08\u7070\u8272\uFF09\uFF1B</li><li>\u5C06u\u6240\u6709\u672A\u88AB\u8BBF\u95EE\u8FC7\u7684\u90BB\u70B9\uFF08\u767D\u8272\uFF09\u5165\u961F\u5217\uFF1B</li><li>\u6807\u6CE8u\u4E3A\u5DF2\u88AB\u63A2\u7D22\u7684\uFF08\u9ED1\u8272\uFF09\u3002</li></ul></li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">breadthFirstSearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>graph<span class="token operator">:</span> Graph<span class="token punctuation">,</span> startVertex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u83B7\u53D6\u56FE\u4E2D\u6240\u6709\u9876\u70B9</span>
  <span class="token keyword">const</span> vertices <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// \u83B7\u53D6\u6240\u6709\u7684\u9876\u70B9\u7684\u5173\u7CFB</span>
  <span class="token keyword">const</span> adjList <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getAdjList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// \u521D\u59CB\u5316\u9876\u70B9\u989C\u8272\u4E3A\u5168\u767D\uFF08\u8868\u793A\u672A\u8BBF\u95EE\uFF09</span>
  <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">initializeColor</span><span class="token punctuation">(</span>vertices<span class="token punctuation">)</span>
  <span class="token comment">// \u521B\u5EFA\u961F\u5217\u7528\u4E8E\u5B58\u50A8\u9876\u70B9\uFF01</span>
  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// \u5F00\u59CB\u641C\u7D22\u7684\u9876\u70B9</span>
  queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>startVertex<span class="token punctuation">)</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4ECE\u961F\u5217\u4E2D\u53BB\u53D6\u9876\u70B9</span>
    <span class="token keyword">const</span> u <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// \u83B7\u53D6\u9876\u70B9\u7684\u76F8\u90BB\u9876\u70B9</span>
    <span class="token keyword">const</span> neighbors <span class="token operator">=</span> adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">!</span>
    <span class="token comment">// \u9876\u70B9\u989C\u8272\u8BBE\u7F6E\u4E3A\u7070\u8272\uFF08\u8868\u793A\u5DF2\u8BBF\u95EE\uFF09</span>
    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">GREY</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">===</span> Colors<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">GREY</span>
        queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">BLACK</span>

    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+h+`" alt="\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22"></p><p><span style="color:pink;">tips\uFF1A\u4E0A\u9762\u7F57\u5217\u7684\u662F\u672A\u52A0\u6743\u65E0\u5411\u56FE\uFF0C\u5173\u4E8E\u672A\u52A0\u6743\u6709\u5411\u56FE\u53EF\u4EE5\u4F9D\u846B\u82A6\u753B\u74E2</span></p><p><strong>\u89E3\u51B3\u6700\u77ED\u8DEF\u5F84\u95EE\u9898\uFF08\u7ED9\u5B9A\u4E00\u4E2A\u56FEG\u548C\u6E90\u9876\u70B9v\uFF0C\u627E\u51FA\u6BCF\u4E2A\u9876\u70B9u\u548Cv\u4E4B\u95F4\u6700\u77ED\u8DEF\u5F84\u7684\u8DDD\u79BB\uFF08\u4EE5\u8FB9\u7684\u6570\u91CF\u8BA1\uFF09\uFF09</strong></p><ul><li>\u5BF9\u4E8E\u7ED9\u5B9A\u9876\u70B9v\uFF0C\u5E7F\u5EA6\u4F18\u5148\u7B97\u6CD5\u4F1A\u8BBF\u95EE\u6240\u6709\u4E0E\u5176\u8DDD\u79BB\u4E3A1\u7684\u9876\u70B9\uFF0C\u63A5\u7740\u662F\u8DDD\u79BB\u4E3A2\u7684\u9876\u70B9\uFF0C\u4EE5\u6B64\u7C7B\u63A8</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">shortestPathByBFS</span> <span class="token operator">=</span> <span class="token punctuation">(</span>graph<span class="token operator">:</span> Graph<span class="token punctuation">,</span> startVertex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> vertices <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> adjList <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getAdjList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">initializeColor</span><span class="token punctuation">(</span>vertices<span class="token punctuation">)</span>
  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> distances<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> predecessors<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>startVertex<span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> vertices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    distances<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    predecessors<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> u <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> neighbors <span class="token operator">=</span> adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">!</span>
    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">GREY</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">===</span> Colors<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">GREY</span>
        distances<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> distances<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
        predecessors<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u
        queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">BLACK</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    distances<span class="token punctuation">,</span>
    predecessors<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u8FF0\u4EE3\u7801\u5728\u4E4B\u524D\u641C\u7D22\u7B97\u6CD5\u7684\u57FA\u7840\u4E0A\u589E\u52A0\u4E86\u5BF9\u8C61 <code>distances</code>\u3001<code>predecessors</code>\uFF0C\u4E00\u4E2A\u662F\u6309\u8FB9\u7EDF\u8BA1\u8DDD\u79BB\u6E90\u70B9\u8DDD\u79BB\uFF0C\u4E00\u4E2A\u662F\u8BB0\u5F55\u9876\u70B9\u7684\u524D\u6EAF\u70B9</p><p>\u5F97\u5230\u4E86<code>predecessors</code>\u5BF9\u8C61\uFF0C\u6211\u4EEC\u9700\u8981\u5904\u7406\u8FD9\u4E2A\u5BF9\u8C61\u8FDB\u800C\u6784\u5EFA\u6E90\u70B9\u5230\u5176\u4F59\u5404\u70B9\u7684\u6700\u77ED\u8DEF\u5F84\u7EBF\u8DEF\uFF0C\u65B9\u6CD5\u5982\u4E0B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">buildPaths</span> <span class="token operator">=</span> <span class="token punctuation">(</span>startVertex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> vertices<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> predecessors<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fromVertex <span class="token operator">=</span> startVertex
  <span class="token keyword">const</span> paths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> toVertex <span class="token operator">=</span> vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token operator">=</span> toVertex<span class="token punctuation">;</span> v <span class="token operator">!==</span> fromVertex<span class="token punctuation">;</span> v <span class="token operator">=</span> predecessors<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>
      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

    path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fromVertex<span class="token punctuation">)</span>

    <span class="token keyword">let</span> s <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      s <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>

    paths<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> paths
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528vitest\u6D4B\u8BD5\u4EE3\u7801\u5982\u4E0B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> describe<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Graph <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../examples/graph&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> breadthFirstSearch<span class="token punctuation">,</span> buildPaths<span class="token punctuation">,</span> shortestPathByBFS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../examples/breadth-first-search&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;graph.ts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> vertices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> vertices<span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;Graph&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &quot;A -&gt; B C D 
      B -&gt; A E F 
      C -&gt; A D 
      D -&gt; A C 
      E -&gt; B 
      F -&gt; B 
      &quot;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;BFS&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

    <span class="token function">breadthFirstSearch</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vertices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      s <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>s <span class="token operator">+</span> v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;A B C D E F&quot;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;shortestPath&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// NOTE: \u6CE8\u610F\u54B1\u4EEC\u7684 vertices\u7B2C\u4E00\u4E2A\u5143\u7D20\u4E00\u5B9A\u662F\u4F5C\u4E3A\u6700\u77ED\u8DEF\u5F84shortestPathByBFS\u7684 startVertex \u4EE5\u53CA buildPaths\u4E2D\u7684 startVertex</span>
    <span class="token comment">// buildPaths \u4E0D\u662F\u4E00\u4E2A\u901A\u7528\u7684\u65B9\u6CD5</span>
    <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> vertices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> vertices<span class="token punctuation">)</span>
      graph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> shortestPath <span class="token operator">=</span> <span class="token function">shortestPathByBFS</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vertices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">buildPaths</span><span class="token punctuation">(</span>vertices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vertices<span class="token punctuation">,</span> shortestPath<span class="token punctuation">.</span>predecessors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      [
        &quot;B - A&quot;,
        &quot;B - A - C&quot;,
        &quot;B - A - D&quot;,
        &quot;B - E&quot;,
        &quot;B - F&quot;,
      ]
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22-dfs" tabindex="-1"><a class="header-anchor" href="#\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22-dfs" aria-hidden="true">#</a> \u6DF1\u5EA6\u4F18\u5148\u641C\u7D22\uFF08DFS\uFF09</h4><p><span style="color:pink;">\u4E0D\u9700\u8981\u6E90\u9876\u70B9</span></p><p>\u8981\u8BBF\u95EE\u9876\u70B9v\uFF0C\u7167\u5982\u4E0B\u6B65\u9AA4\u505A\uFF1A</p><ul><li>\u6807\u6CE8v\u4E3A\u88AB\u53D1\u73B0\u7684\uFF08\u7070\u8272\uFF09\uFF1B</li><li>\u5BF9\u4E8Ev\u7684\u6240\u6709\u672A\u8BBF\u95EE\uFF08\u767D\u8272\uFF09\u7684\u90BB\u70B9w\uFF0C\u8BBF\u95EE\u9876\u70B9w\uFF1B</li><li>\u6807\u6CE8v\u4E3A\u5DF2\u88AB\u63A2\u7D22\u7684\uFF08\u9ED1\u8272\uFF09\u3002</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">depthFirstSearchVisit</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  v<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  color<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  adjList<span class="token operator">:</span> Dictionary<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u9876\u70B9\u7F6E\u4E3A\u7070\u8272\uFF0C\u8868\u793A\u8BBF\u95EE\u8FC7</span>
  color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">GREY</span>
  callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

  <span class="token comment">// \u83B7\u53D6\u9876\u70B9\u7684\u6240\u6709\u90BB\u63A5\u70B9</span>
  <span class="token keyword">const</span> neighbors <span class="token operator">=</span> adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">!</span>

  <span class="token comment">// \u6240\u6709\u90BB\u63A5\u70B9\u82E5\u4E3A\u767D\u8272\u90A3\u4E48\u9012\u5F52\u7EE7\u7EED\u8BBF\u95EE</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> w <span class="token keyword">of</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">===</span> Colors<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span>
      <span class="token function">depthFirstSearchVisit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> color<span class="token punctuation">,</span> adjList<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u9876\u70B9\u8BBE\u7F6E\u4E3A\u5B8C\u5168\u63A2\u7D22</span>
  color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">BLACK</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">depthFirstSearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>graph<span class="token operator">:</span> Graph<span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u83B7\u53D6\u6240\u6709\u9876\u70B9</span>
  <span class="token keyword">const</span> vertices <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// \u83B7\u53D6\u6240\u6709\u90BB\u63A5\u70B9</span>
  <span class="token keyword">const</span> adjList <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getAdjList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// \u83B7\u53D6\u6240\u6709\u9876\u70B9\u7684\u9876\u70B9\u989C\u8272</span>
  <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">initializeColor</span><span class="token punctuation">(</span>vertices<span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> vertices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">===</span> Colors<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span>
      <span class="token function">depthFirstSearchVisit</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> color<span class="token punctuation">,</span> adjList<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+y+'" alt="dfs\u7B97\u6CD5"></p><p><span style="color:pink;">\u6CE8\u610F\uFF1A<br>1. \u8BBF\u95EE\u7684\u987A\u5E8F\u8DDF\u90BB\u63A5\u70B9\u7684\u987A\u5E8F\u662F\u6709\u5173\u7CFB\u7684\uFF08\u4EE3\u7801 <code>depthFirstSearchVisit -&gt; for (const w of neighbors)</code>\uFF09<br>2. <code>depthFirstSearch</code> \u51FD\u6570\u5185\u90E8\u6709\u4E00\u4E2A\u904D\u5386\u6240\u6709\u9876\u70B9\u6570\u7EC4\u7684\u5FAA\u73AF\uFF0C\u4F1A\u5224\u5B9A\u9876\u70B9\u662F\u5426\u662F\u767D\u8272\uFF0C\u8FDB\u800C\u6267\u884C<code>depthFirstSearchVisit</code>\uFF0C\u4F46\u662F\u5728\u6211\u4EEC\u7ED9\u51FA\u7684\u5982\u56FE\u793A\u4F8B\u4E2D\u7684\u56FE\u6267\u884C\u7684\u65F6\u5019\u4EC5\u4EC5\u53EA\u4F1A\u6267\u884C<code>depthFirstSearchVisit</code>\u65B9\u6CD5\u4E00\u6B21\uFF0C\u56E0\u4E3A\u54B1\u4EEC\u8BBF\u95EE\u7684A\u9876\u70B9\u4E0E\u5176\u4ED6\u4EFB\u4F55\u4E00\u4E2A\u9876\u70B9\u4E4B\u95F4\u90FD\u662F\u5B58\u5728\u8DEF\u5F84\u7684\uFF01\uFF01\uFF0C\u5018\u82E5\u4F7F\u7528\u5982\u4E0B\u7684\u65E0\u5411\u56FE\u90A3\u4E48\u51FD\u6570 <code>depthFirstSearchVisit</code> \u4F1A\u6267\u884C\u4E24\u6B21\uFF01\uFF01<code>GHI</code>\u6784\u6210\u7684\u56FE\u4E0E<code>ABCDEF</code>\u6784\u6210\u7684\u56FE\u6CA1\u6709\u5173\u8054\u5173\u7CFB\uFF01\uFF01</span></p><p><img src="'+f+'" alt="\u8BBF\u95EE\u6B21\u6570\u5BF9\u6BD4\u56FE"></p><p><span style="color:pink;">\u6DF1\u5EA6\u4F18\u5148\u7B97\u6CD5\u80CC\u540E\u7684\u601D\u60F3\u662F\u4EC0\u4E48\uFF1F\u8FB9\u662F\u4ECE\u6700\u8FD1\u53D1\u73B0\u7684\u9876\u70B9u\u5904\u88AB\u5411\u5916\u63A2\u7D22\u7684\u3002\u53EA\u6709\u8FDE\u63A5\u5230\u672A\u53D1\u73B0\u7684\u9876\u70B9\u7684\u8FB9\u88AB\u63A2\u7D22\u4E86\u3002\u5F53u\u6240\u6709\u7684\u8FB9\u90FD\u88AB\u63A2\u7D22\u4E86\uFF0C\u8BE5\u7B97\u6CD5\u56DE\u9000\u5230u\u88AB\u53D1\u73B0\u7684\u5730\u65B9\u53BB\u63A2\u7D22\u5176\u4ED6\u7684\u8FB9<code>depthFirstSearchVisit -&gt; for (const w of neighbors)</code>\u3002\u8FD9\u4E2A\u8FC7\u7A0B\u6301\u7EED\u5230\u6211\u4EEC\u53D1\u73B0\u4E86\u6240\u6709\u4ECE\u539F\u59CB\u9876\u70B9\u80FD\u591F\u89E6\u53CA\u7684\u9876\u70B9\u3002\u5982\u679C\u8FD8\u7559\u6709\u4EFB\u4F55\u5176\u4ED6\u672A\u88AB\u53D1\u73B0\u7684\u9876\u70B9\uFF0C\u6211\u4EEC\u5BF9\u65B0\u6E90\u9876\u70B9\u91CD\u590D\u8FD9\u4E2A\u8FC7\u7A0B<code>depthFirstSearch -&gt; for (const v of vertices)</code>\u3002\u91CD\u590D\u8BE5\u7B97\u6CD5\uFF0C\u76F4\u5230\u56FE\u4E2D\u6240\u6709\u7684\u9876\u70B9\u90FD\u88AB\u63A2\u7D22\u4E86</span></p><p><strong>\u62D3\u6251\u6392\u5E8F</strong>\uFF1A\u7F16\u6392\u4E00\u4E9B\u4EFB\u52A1\u6216\u6B65\u9AA4\u7684\u6267\u884C\u987A\u5E8F\uFF08\u53EA\u80FD\u662F\u6709\u5411\u65E0\u73AF\u56FE DAG\uFF09</p><p><img src="'+w+`" alt="DAG"></p><p>\u9996\u5148\u7B2C\u4E00\u6B65\u5C31\u662F\u54B1\u4EEC\u9700\u8981\u4E00\u4E2A\u51FD\u6570\u53EF\u4EE5\u5E2E\u52A9\u54B1\u4EEC\u8BB0\u5F55\u8BBF\u95EE\u9876\u70B9\u7684\u53D1\u73B0\u65F6\u95F4\u4EE5\u53CA\u9876\u70B9\u8BBF\u95EE\u5B8C\u6210\u7684\u63A2\u7D22\u65F6\u95F4\uFF0C\u5F53\u7136\u8FD8\u6709\u524D\u6EAF\u70B9\uFF08\u6709\u4E86\u524D\u6EAF\u70B9\u90A3\u4E48\u54B1\u4EEC\u53EF\u4EE5\u5199\u65B9\u6CD5\u6784\u5EFA\u9876\u70B9\u95F4\u7684\u8DEF\u5F84\u6570\u7EC4\uFF0C\u5C31\u50CF\u524D\u9762BFS\u4E2D\u7684<code>buildPaths</code>\u4E00\u6837\uFF09</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">DFSVisit</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  v<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  color<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  d<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  f<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  p<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  time<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  adjList<span class="token operator">:</span> Dictionary<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">GREY</span>
  <span class="token comment">// \u53D1\u73B0\u65F6\u95F4</span>
  d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>time

  <span class="token comment">// \u83B7\u53D6\u9876\u70B9\u7684\u6240\u6709\u90BB\u63A5\u70B9</span>
  <span class="token keyword">const</span> neighbors <span class="token operator">=</span> adjList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">!</span>

  <span class="token comment">// \u6240\u6709\u90BB\u63A5\u70B9\u82E5\u4E3A\u767D\u8272\u90A3\u4E48\u9012\u5F52\u7EE7\u7EED\u8BBF\u95EE</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> w <span class="token keyword">of</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">===</span> Colors<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      p<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> v
      <span class="token function">DFSVisit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> color<span class="token punctuation">,</span> d<span class="token punctuation">,</span> f<span class="token punctuation">,</span> p<span class="token punctuation">,</span> time<span class="token punctuation">,</span> adjList<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u9876\u70B9\u8BBE\u7F6E\u4E3A\u5B8C\u5168\u63A2\u7D22</span>
  color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Colors<span class="token punctuation">.</span><span class="token constant">BLACK</span>

  <span class="token comment">// \u5B8C\u6210\u65F6\u95F4</span>
  f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>time
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">DFS</span> <span class="token operator">=</span> <span class="token punctuation">(</span>graph<span class="token operator">:</span> Graph<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> vertices <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> adjList <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getAdjList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">initializeColor</span><span class="token punctuation">(</span>vertices<span class="token punctuation">)</span>

  <span class="token keyword">const</span> discovery<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> finished<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> predecessors<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> vertices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    finished<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    discovery<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    predecessors<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> w <span class="token keyword">of</span> vertices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">===</span> Colors<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span>
      <span class="token function">DFSVisit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> color<span class="token punctuation">,</span> discovery<span class="token punctuation">,</span> finished<span class="token punctuation">,</span> predecessors<span class="token punctuation">,</span> time<span class="token punctuation">,</span> adjList<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    discovery<span class="token punctuation">,</span>
    finished<span class="token punctuation">,</span>
    predecessors<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+x+`" alt="\u6392\u5E8F\u6267\u884C\u8FC7\u7A0B"></p><p>\u6709\u4E86\u8BBF\u95EE\u5B8C\u6210\u65F6\u95F4\uFF0C\u63A5\u4E0B\u6765\u5C06\u6240\u6709\u9876\u70B9\u7684\u8BBF\u95EE\u65F6\u95F4\u6309\u4ECE\u5927\u5230\u5C0F\u7684\u987A\u5E8F\u8F93\u51FA\u5373\u4E3A\u62D3\u6251\u6392\u5E8F\uFF08\u76F8\u5F53\u4E8E\u4EFB\u52A1\u7684\u6267\u884C\u987A\u5E8F\uFF0C\u6267\u884CA\u4EFB\u52A1\u540E\u624D\u80FD\u6267\u884CB\u4EFB\u52A1\uFF0C\u6BCF\u4E2A\u4EFB\u52A1\u7684\u6267\u884C\u90FD\u6709\u5148\u51B3\u6761\u4EF6\uFF09\uFF0C\u4EE3\u7801\u5982\u4E0B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">topSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vertices<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fTimes<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> maxName <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> vertices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fTimes<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        max <span class="token operator">=</span> fTimes<span class="token punctuation">[</span>v<span class="token punctuation">]</span>
        maxName <span class="token operator">=</span> v
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    path <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>maxName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">delete</span> fTimes<span class="token punctuation">[</span>maxName<span class="token operator">!</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> path
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><span style="color:pink;">\u5BF9\u4E86\uFF1A\u4E0D\u540C\u7684\u9876\u70B9\u987A\u5E8F\uFF0C\u62D3\u6251\u6392\u5E8F\u7684\u7ED3\u679C\u4E0D\u540C</span></p><p>vitest\u6D4B\u8BD5\u7528\u4F8B\u5982\u4E0B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;depthFirstSearch&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  <span class="token function">depthFirstSearch</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    s <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>s <span class="token operator">+</span> v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;A B E F C D&quot;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;DFS-topSort&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> vertices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> vertices<span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token constant">DFS</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span>

  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">topSort</span><span class="token punctuation">(</span>vertices<span class="token punctuation">,</span> result<span class="token punctuation">.</span>finished<span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token string">&#39;&quot; - E - F - C - D - A - B&quot;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u5728 DFS \u6D4B\u8BD5\u7528\u4F8B\u4E2D\u6539\u53D8\u9876\u70B9\u987A\u5E8F</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;DFS-order-topSort&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> vertices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> vertices<span class="token punctuation">)</span>
    graph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span>
  graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token constant">DFS</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span>

  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">topSort</span><span class="token punctuation">(</span>vertices<span class="token punctuation">,</span> result<span class="token punctuation">.</span>finished<span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token string">&#39;&quot; - A - C - F - B - E - D&quot;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78),C=[B];function F(_,A){return s(),a("div",null,C)}const D=n(E,[["render",F],["__file","110401.html.vue"]]);export{D as default};
